The '''0-add_integer''' module

Using '''add_integer'''

First import the add_integer function from module 0-add_integer.py
>>> add_integer = __import__("0-add_integer").add_integer

Then use it:

>>> add_integer(0,0)
0
>>> add_integer(98,0)
98
>>> add_integer(98)
196
>>> add_integer(98.4)
196
>>> add_integer(1.2,3.5)
4
>>> add_integer('a',4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(5,'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer('b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 11, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(1000e1000)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    return int(a) + int(b)
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('nan'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    return int(a) + int(b)
ValueError: cannot convert float NaN to integer
