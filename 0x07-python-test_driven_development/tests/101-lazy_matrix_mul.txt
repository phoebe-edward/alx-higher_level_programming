The '''101-lazy_matrix_mul''' module

Using '''lazy_matrix_mul''' function

First, import it:

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Then, use it:

>>> A = [[1, 2], [3, 4]]
>>> B = [[3, 4]]
>>> lazy_matrix_mul(A, B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: shapes (2,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)
>>> B = [[3], [4]]
>>> lazy_matrix_mul(A, B)
array([[11],
       [25]])
>>> lazy_matrix_mul(A)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
>>> lazy_matrix_mul()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
>>> lazy_matrix_mul(A, 'a')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: Scalar operands are not allowed, use '*' instead
>>> lazy_matrix_mul('b', A)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: Scalar operands are not allowed, use '*' instead
>>> lazy_matrix_mul(A, [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
>>> lazy_matrix_mul(A, [[]])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
>>> lazy_matrix_mul([], B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: shapes (0,) and (2,1) not aligned: 0 (dim 0) != 2 (dim 0)
>>> lazy_matrix_mul([[]], B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: shapes (1,0) and (2,1) not aligned: 0 (dim 1) != 2 (dim 0)
>>> A = [[1, 2], [3, 'a']]
>>> lazy_matrix_mul(A, B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
TypeError: invalid data type for einsum
>>> A = [[1.5, 3.0], [2.2, 3.1]]
>>> B = [[2],[0]]
>>> lazy_matrix_mul(A, B)
array([[3. ],
       [4.4]])
>>> A = [[1.5, 3.0], [2.2]]
>>> lazy_matrix_mul(A, B)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x07-python-test_driven_development/101-lazy_matrix_mul.py", line 9, in lazy_matrix_mul
    res = np.matmul(m_a, m_b)
ValueError: setting an array element with a sequence.
